AWSTemplateFormatVersion: 2010-09-09
Description: Delete Accounts in an OU After x Days
Parameters:
  age:
    Type: String
    Description: The age in days after which the account should be deleted
  activeOuId:
    Default: ou-8rh6-yodb3pse
    Type: String
    Description: The OU Id that will be checked for deletable accounts
  closingOuId:
    Default: ou-8rh6-j7xusnjo
    Type: String
    Description: The OU Id where accounts will go to await deletion

Resources:
#Gather the list of AWS Accounts that should be deleted and send it to SQS
  deletableAccountsQueue:
    Type: AWS::SQS::Queue
    Properties: {}
  getDeletableAccountsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      Policies:
        - PolicyName: sqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: sqs
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt deletableAccountsQueue.Arn
        - PolicyName: orgs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: orgs
              Effect: Allow
              Action:
                - organizations:ListChildren
                - organizations:DescribeAccount
              Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  getDeletableAccountsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          SQS_QUEUE_URL: !GetAtt deletableAccountsQueue.QueueUrl
          ACTIVE_OU_ID: !Ref activeOuId
          AGE: !Ref age
      Code:
        ZipFile: |
          import json
          import boto3
          import datetime
          import os

          def days_old(date):
              get_date_obj = date
              date_obj = get_date_obj.replace(tzinfo=None)
              diff = datetime.datetime.now() - date_obj
              return diff.days
              
          def lambda_handler(event, context):
              age = int(os.environ['AGE'])
              queue = os.environ['SQS_QUEUE_URL']
              ou = os.environ['ACTIVE_OU_ID'] 
              orgs = boto3.client('organizations')
              sqs = boto3.client('sqs')
              accounts = orgs.list_children (
                  ParentId=ou,
                  ChildType='ACCOUNT'
              )
              for i in accounts['Children']:
                  account = orgs.describe_account(AccountId=i['Id'])
                  create_date = account['Account']['JoinedTimestamp']
                  account_age = days_old(create_date)
                  if account_age > age:
                      msg = sqs.send_message(
                          QueueUrl=queue,
                          MessageBody=account['Account']['Id']
                      )
                      print("staging for delete: " + account['Account']['Id'] )
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt getDeletableAccountsLambdaRole.Arn
      Runtime: python3.9
      Timeout: 60
  getDeletableAccountsLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      State: ENABLED
      Targets:
        -
          Arn:
            !GetAtt  getDeletableAccountsLambda.Arn
          Id: getDeletableAccountsLambda
  getDeletableAccountsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt getDeletableAccountsLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt getDeletableAccountsLambdaRule.Arn
#Move the Account to the Closing OU & deletion
  moveThenDeleteAccountLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      Policies:
        - PolicyName: sqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: sqs
              Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt deletableAccountsQueue.Arn
        - PolicyName: moveNtag
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: moveNtag
              Effect: Allow
              Action: 
                - organizations:TagResource
                - organizations:MoveAccount
              Resource: '*'
        - PolicyName: orgsClose
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: orgs
              Effect: Allow
              Action:
                - organizations:CloseAccount
              Resource: '*'
              Condition:
                StringEquals: 
                  'aws:ResourceTag/CloseAccount': true
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  moveThenDeleteAccountTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt deletableAccountsQueue.Arn
      FunctionName: !GetAtt moveThenDeleteAccountLambda.Arn
  moveThenDeleteAccountLambda:
    Type:  AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          CLOSING_OU_ID: !Ref closingOuId
          ACTIVE_OU_ID: !Ref activeOuId
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          close_org = os.environ['CLOSING_OU_ID']
          current_org = os.environ['ACTIVE_OU_ID']

          def lambda_handler(event, context):
              orgs = boto3.client('organizations')
              
              for record in  event['Records']:
                  payload = record['body']
                  #Move to close OU
                  move = orgs.move_account(
                      AccountId=payload,
                      SourceParentId=current_org,
                      DestinationParentId=close_org
                  )
                  print(payload + " moved.")
                  #Tag Account
                  tag = orgs.tag_resource(
                      ResourceId=payload,
                      Tags=[
                          {
                              'Key':'CloseAccount',
                              'Value':'true'
                          }
                      ]
                  )
                  #Close account
                  close = orgs.close_account(
                      AccountId=payload
                  )
                  print(payload + " closed")
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt moveThenDeleteAccountLambdaRole.Arn
      Runtime: python3.9
      Timeout: 10